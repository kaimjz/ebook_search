<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BH//Hhw//x/8P/8//j////////////////8=
</value>
  </data>
</root>